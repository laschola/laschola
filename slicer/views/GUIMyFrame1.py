"""Subclass of MyFrame1, which is generated by wxFormBuilder."""

import wx
import numpy as np

from slicer.views import GUI
from slicer.models.getshape import get_shape
from slicer.models.input_for_GUIMyFrame import InputFile
from slicer.models.serchforstartvoxel import retrieve_startvoxel
from slicer.models.tool_path.printpath import PrintPath
from slicer.models.tool_path import generategcode
from slicer.models.tool_path import printpath as pp


# Implementing MyFrame1
class GUIMyFrame1(GUI.MyFrame1):
    def __init__(self, parent):
        GUI.MyFrame1.__init__(self, parent)
        self.all_coordinate = None
        self.start_position = None
        self.visited_node = None

        # Handlers for MyFrame1 events.
    def filament_diameter_value(self, event):
        # TODO: Implement filament_diameter_value
        pass

    def nozzle_diameter_value(self, event):
        # TODO: Implement nozzle_diameter_value
        pass

    def nozzle_temperature_value(self, event):
        # TODO: Implement nozzle_temperture_value
        return self.m_textCtrl3.GetValue()


    def Bet_temperature_value(self, event):
        # TODO: Implement Bet_temperture_value
        return self.m_textCtrl4.GetValue()

    def print_spped_value(self, event):
        # TODO: Implement print_spped_value
        return self.m_textCtrl5.GetValue()

    def surround_outer_ctrl(self, event):
        # TODO: Implement surround_outer_ctrl
        pass

    def surround_inner_ctrl(self, event):
        # TODO: Implement surround_inner_ctrl
        pass

    def import_file(self,event):
        # TODO: Implement import_file

        dialog = wx.FileDialog(None, u'Please Select a file',wildcard="obj file(*.obj) | *.obj" )
        dialog.ShowModal()
        name = dialog.GetPath()
        input_file = InputFile()
        self.all_coordinate, self.start_position = retrieve_startvoxel(input_file.load_obj(name))

        return

    def convert_gcode(self, event):
        # TODO: Implement convert_gcode
        each_layer_voxel_coordinate, outer_coordinate, inner_coordinate, all_y_coordinate_in_same_layer, average_distance_voxel \
            = get_shape(self.all_coordinate, self.start_position)

        printpath = PrintPath(outer_coordinate, inner_coordinate, tuple(np.round(self.start_position, 4)),
                              average_distance_voxel)
        self.visited_node = printpath.searching_for_printpath()
        pp.visualization(outer_coordinate, inner_coordinate, self.visited_node)

        return

    def save_as(self, event):
        # TODO: Implement save_as
        dialog = wx.FileDialog(None, u'Save as...', wildcard="gcode file(*.gcode) | *.gocde", style=wx.FD_SAVE)
        dialog.ShowModal()
        name = dialog.GetPath()
        generategcode.generate_gcode(name,
                                     self.visited_node,
                                     None,
                                     None,
                                     self.nozzle_temperature_value(event),
                                     self.Bet_temperature_value(event),
                                     self.print_spped_value(event),
                                     None,
                                     None)


        return


if __name__ == "__main__":
    app = wx.App(False)
    frame = GUIMyFrame1(None)
    frame.Show(True)
    app.MainLoop()

